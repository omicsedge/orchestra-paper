//#############################################################################
// Initialize: nonWF model + nucleotideBased + TreeSeq + HapMap recombination #
//#############################################################################
initialize() {
    // Appropriate model type
    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(keepPedigrees=T, nucleotideBased=T);
    initializeTreeSeq();
    length = initializeAncestralNucleotides("/reference_files/fasta/PARAMETER_CHR.fa");
    defineConstant("L", length);
    initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
    initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(0.0)); // if mmJukesCantor(0.0)) -> only genetic drift, no selection
    initializeGenomicElement(g1, 0, L-1);

    // HapMap recombination map
    lines = readFile("/reference_files/hapmap_recomb_hg38/PARAMETER_CHR.txt");
    lines = lines[1:(size(lines)-1)];
    rates = NULL;
    ends = NULL;
    for (line in lines)  {
        components = strsplit(line, " ");
        ends = c(ends, asInteger(components[0]));
        rates = c(rates, asFloat(components[1]));
    }
    ends = c(ends[1:(size(ends)-1)] - 2, length-1);
    rates = rates * 1e-8;
    initializeRecombinationRate(rates, ends);
    // Delete any existing pedigree log files
    deleteFile("mating.txt");
    deleteFile("death.txt");
}
//#####################################################
// First generation:                                  #
// * Load VCF with individuals per population         #
// * Provide initial tags and remember next tag value #
//#####################################################
1 early() {
    // Load GType data
    sim.addSubpop("p1", PARAMETER_SAMPLESIZE);
    p1.genomes.readFromVCF("data.vcf", m1);
    // Provide initial tags and remember the next tag value
    p1.individuals.tag = 1:PARAMETER_SAMPLESIZE;
    sim.tag = (PARAMETER_SAMPLESIZE+1);
    // Trace the ancestry at each position in each individual. This function explicitly retains the first-generation individuals
    sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}
//########################################################
// Reproduction:                                         #
// * Parents are chosen randomly & generate offspring    #
// * Avoid inbreeding                                    #
// * Track pedigree and produce output file recording it #
//########################################################
reproduction() {
    // New population sizes
    if (sim.generation == PARAMETER_GENERATIONS_N)
    {
        SampleSize_p1 = asInteger(PARAMETER_NUMBER_SIMULATED_INDIVIDUALS/DIVISION_PARAMETER);
   }
    else
    {
        SampleSize_p1 = PARAMETER_NUMBER_SIMULATED_INDIVIDUALS;
   }
    // parents are chosen randomly
    // p1
    parents1 = p1.sampleIndividuals(SampleSize_p1, replace=T);
    for (i in seqLen(SampleSize_p1))
    {
        firstParent = parents1[i];
        // Avoid close relatives as mates
        do secondParent = p1.sampleIndividuals(1, exclude=firstParent);
        while (firstParent.relatedness(secondParent) >= 0.0625);
        child = p1.addCrossed(firstParent, secondParent);
        child.tag = sim.tag;
        sim.tag = sim.tag + 1;
        // log the mating
        line = paste(sim.generation, firstParent.tag, secondParent.tag, child.tag);
        writeFile("mating.txt", line, append=T);
     }

     self.active = 0;
}
//#######################################################################################################
// Survival selection: next generation replace completely previous one (parents die; offspring survive) #
//#######################################################################################################
survival() {
    if (individual.age != 0) {
            // log the death
            line = sim.generation + " " + individual.tag;
            writeFile("death.txt", line, append=T);
    }
    return (individual.age == 0);
}
//####################
// Track generations #
//####################
1:PARAMETER_GENERATIONS_N first() {
    catn("Generation: " + sim.generation);
}
//#######################
// Output tree sequence #
//#######################
PARAMETER_GENERATIONS_N late() {
    sim.treeSeqOutput("output.trees");
}
