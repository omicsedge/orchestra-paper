
//#########################
// Read recorded pedigree #
//#########################
function (i)readIntTable(s$ path)
{
	if (!fileExists(path))
		stop("readIntTable(): File not found at path " + path);
	l = readFile(path);
	m = sapply(l, "asInteger(strsplit(applyValue));", simplify="matrix");
	return t(m);
}


//#############################################################################
// Initialize: nonWF model + nucleotideBased + TreeSeq + HapMap recombination #
//#############################################################################
initialize() {
    // Appropriate model type
	initializeSLiMModelType("nonWF");
    initializeSLiMOptions(keepPedigrees=T, nucleotideBased=T);
    initializeTreeSeq();

	length = initializeAncestralNucleotides("/data/fasta/PARAMETER_CHR.fa");

	defineConstant("L", length);
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(0.0)); // if mmJukesCantor(0.0)) -> only genetic drift, no selection
	initializeGenomicElement(g1, 0, L-1);
	
	// HapMap recombination map
	lines = readFile("/data/hapmap_recomb_hg38/PARAMETER_CHR.txt"); 
	lines = lines[1:(size(lines)-1)];
	rates = NULL;
	ends = NULL;
	for (line in lines)  {  
		components = strsplit(line, " ");
		ends = c(ends, asInteger(components[0]));
		rates = c(rates, asFloat(components[1]));
	}
	ends = c(ends[1:(size(ends)-1)] - 2, length-1);
	rates = rates * 1e-8;
	initializeRecombinationRate(rates, ends);

	// read in the pedigree log files
	defineConstant("M", readIntTable("mating.generation.txt"));
	defineConstant("D", readIntTable("death.generation.txt"));
	
	// extract the generations for quick lookup
	defineConstant("Mg", drop(M[,0]));
	defineConstant("Dg", drop(D[,0]));
}


//#####################################################
// First generation:                                  #
// * Load VCF with individuals per population         #
// * Provide initial tags matching the original model #
//#####################################################
1 early() {
    // Load GType data with ALL superpops (EUR, EAS, SAS, AFR, AMR)
	sim.addSubpop("p1", PARAMETER_ALL_SAMPLESIZE);
	p1.genomes.readFromVCF("data.ALL.vcf", m1);

    // Provide initial tags and remember the next tag value
    p1.individuals.tag = 1:PARAMETER_ALL_SAMPLESIZE;
	 sim.tag = (PARAMETER_ALL_SAMPLESIZE+1);

    // Trace the ancestry at each position in each individual. This function explicitly retains the first-generation individuals
    sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}


//##########################################
// Reproduction:                           #
// * Parents are chosen following pedigree #
//##########################################
reproduction() {
	// generate all offspring for the generation
	m = M[Mg == sim.generation,];
	
	for (index in seqLen(nrow(m))) {
		row = m[index,];
		ind = subpop.subsetIndividuals(tag=row[,1]);
		mate = subpop.subsetIndividuals(tag=row[,2]);
		child = subpop.addCrossed(ind, mate);
		child.tag = row[,3];
	}
	
	self.active = 0;
}


//########################################################################################
// Survival selection: use the fitnessScaling property values of individuals to weed out #
// specifically the individuals that died in each generation in the original model run   #
//########################################################################################
2: early() {
	// execute the predetermined mortality
	inds = p1.individuals;
	inds.fitnessScaling = 1.0;
	
	d = drop(D[Dg == sim.generation, 1]);
	indices = match(d, inds.tag);
	inds[indices].fitnessScaling = 0.0;
}


//####################
// Track generations #
//####################
1:PARAMETER_GENERATIONS_N first() {
    catn("Generation: " + sim.generation);
}


//#######################
// Output tree sequence #
//#######################
PARAMETER_GENERATIONS_N late() { 
    sim.treeSeqOutput("output.trees");
}
